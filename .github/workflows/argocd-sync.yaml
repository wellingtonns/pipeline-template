name: Template Build and Deploy App

on:
  workflow_call:
    inputs:
      IMAGE_NAME:
        required: true
        type: string
      APP_NAME:
        required: true
        type: string
    secrets:
      ARGOCD_URL:
        required: true
      ARGOCD_USER:
        required: true
      ARGOCD_PASS:
        required: true
      DOCKERHUB_USERNAME:
        required: true
      DOCKERHUB_TOKEN:
        required: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: ${{ inputs.IMAGE_NAME }}
      APP_NAME: ${{ inputs.APP_NAME }}
      ARGOCD_URL: ${{ secrets.ARGOCD_URL }}
      ARGOCD_USER: ${{ secrets.ARGOCD_USER }}
      ARGOCD_PASS: ${{ secrets.ARGOCD_PASS }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Login no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Definir TAG
        run: echo "TAG=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Build da imagem Docker
        run: |
          docker build -t $IMAGE_NAME:${TAG} .
          docker tag $IMAGE_NAME:${TAG} $IMAGE_NAME:latest

      - name: Push da imagem Docker
        run: |
          docker push $IMAGE_NAME:${TAG}
          docker push $IMAGE_NAME:latest

      - name: Atualizar deployment.yaml
        run: |
          sed -i "s|image: $IMAGE_NAME.*|image: $IMAGE_NAME:${TAG}|g" manifestos/deployment.yaml

      - name: Commit e Push
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
          git add manifestos/deployment.yaml
          git commit -m "Atualiza imagem para tag ${TAG}" || echo "Nenhuma altera√ß√£o para commit"
          git push origin HEAD

      - name: Instalar jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Login no ArgoCD
        id: login
        run: |
          echo "üîê Fazendo login no ArgoCD"
          TOKEN=$(curl -sk -X POST -H "Content-Type: application/json" \
            -d '{"username":"'"$ARGOCD_USER"'","password":"'"$ARGOCD_PASS"'"}' \
            https://$ARGOCD_URL/api/v1/session | jq -r .token)

          if [[ -z "$TOKEN" || "$TOKEN" == "null" ]]; then
            echo "‚ùå Erro no login no ArgoCD"
            exit 1
          fi

          echo "ARGOCD_TOKEN=$TOKEN" >> $GITHUB_ENV

      - name: Verificar Status no ArgoCD
        run: |
          echo "üîç Verificando status do app $APP_NAME"

          degraded_found=false

          for i in {1..8}
          do
            RESPONSE=$(curl -sk -H "Authorization: Bearer $ARGOCD_TOKEN" https://$ARGOCD_URL/api/v1/applications/$APP_NAME)
            STATUS=$(echo "$RESPONSE" | jq -r '.status.sync.status')
            HEALTH=$(echo "$RESPONSE" | jq -r '.status.health.status')

            if [[ "$STATUS" == "Synced" && "$HEALTH" == "Healthy" ]]; then
              echo "Aplica√ß√£o sincronizada ---- Status ---= Healthy ‚úÖ"
              exit 0
            fi

            if [[ "$HEALTH" == "Degraded" ]]; then
              degraded_found=true
            fi

            echo "Aplica√ß√£o Checkins --- Status ---= Processing... ‚è≥"
            sleep 30
          done

          if [[ "$degraded_found" == "true" ]]; then
            echo "Aplica√ß√£o com Falha ---- Status ---= Degraded ‚ùå"
            exit 1
          else
            echo "Aplica√ß√£o n√£o sincronizada e n√£o degradada ap√≥s 8 tentativas"
            exit 1
          fi
